{"version":3,"sources":["js/WhosThatPokemon.tsx","js/pokemon/NameId.tsx","js/pokemon/Abilities.tsx","js/pokemon/Stats.tsx","js/pokemon/Types.tsx","js/pokemon/Pokemon.tsx","js/Search.tsx","js/About.tsx","js/pokemon/ByType.tsx","js/SearchByType.tsx","js/Main.tsx","index.tsx"],"names":["pokemonToGuess","index","spriteUrl","correctGuesses","guessCount","correctAlert","NameId","name","this","props","pokemonName","toString","charAt","toUpperCase","substring","className","src","alt","pokemonId","Component","Abilities","abilityComponent","abilities","map","ability","key","replace","Stats","statsItems","statsArray","stat","Types","typeItems","typesArray","type","sortedTypesArray","sortedAbilitiesArray","Pokemon","handleResponse","error","response","body","statusCode","setState","dataRetrieved","alert","query","jsonBody","JSON","parse","console","log","id","sprites","handleSprite","types","handleTypes","handleAbilities","stats","handleStats","state","prevProps","toLowerCase","require","request","method","url","headers","Connection","Host","Accept","front_default","slot","abilityName","character","push","statValue","statName","base_stat","spriteComponent","nameIdComponent","typeComponent","abilitiesComponent","statsComponent","Search","onEnterKeyDown","e","keyCode","search","document","getElementById","addEventListener","window","focus","inputValue","value","placeholder","About","href","pokemonList","strengths","weaknesses","immunities","ByType","pokemonRetrieved","pokemon","handlePokemon","handleDamageRelations","damage_relations","typeName","i","length","damageRelations","doubleDamageFrom","double_damage_from","doubleDamageTo","double_damage_to","immuneTo","no_damage_from","sort","a","b","nameA","nameB","strengthsComponent","weaknessesComponent","immunitiesComponent","pokemonListComponent","poke","onClick","onClickLink","SearchByType","WhosThatPokemon","guess","guessedCorrectly","validPokemonToGuess","Math","floor","random","currentComponent","forceUpdate","resetGame","getRandomPokemonIndex","getPokemonSprite","guessAccuracy","toFixed","Main","exact","to","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.4441db07.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport '../css/wtp.scss';\n\ntype State = {\n  guessedCorrectly: boolean,\n  validPokemonToGuess: boolean,\n}\n\nvar pokemonToGuess: string;\nvar index: number;\nvar spriteUrl: string;\n\nvar correctGuesses: number;\nvar guessCount: number;\n\nvar correctAlert; // the element that states whether the user has guessed correctly or not\n\nclass WhosThatPokemon extends Component<any, State> {\n\n  constructor(props) {\n    super(props);\n\n    correctGuesses = 0;\n    guessCount = 0;\n\n    this.state = {\n      guessedCorrectly: false,\n      validPokemonToGuess: false\n    };\n  }\n\n  onEnterKeyDown = (e: KeyboardEvent) => {\n    if (e.keyCode === 13 || e.key === \"Enter\") {\n      this.guess();\n    }\n  }\n\n  getRandomPokemonIndex(): number {\n    let index;\n\n    // max: 807\n    // min: 1\n    index = Math.floor(Math.random() * (807 - 1) + 1);\n\n    return index;\n  }\n\n  getPokemonSprite(index: number) {\n    // setup request\n    var request = require(\"request\");\n    var options = {\n      method: 'GET',\n      url: 'https://pokeapi.co/api/v2/pokemon/' + index,\n      headers: {\n        'cache-control': 'no-cache',\n         Connection: 'keep-alive',\n         Host: 'pokeapi.co',\n         'Cache-Control': 'no-cache',\n         Accept: '*/*'\n       }\n     };\n\n     let currentComponent = this;\n\n     request(options, function(error, response, body) {\n       if (response.statusCode !== 200) {\n         // on the off chance we get a 404 not found (or otherwise)\n         return;\n       }\n\n       let jsonBody = JSON.parse(body);\n       pokemonToGuess = jsonBody.name;\n       spriteUrl = jsonBody.sprites.front_default;\n\n       console.log(\"Retrieved Pokemon (cheater!): \" + pokemonToGuess);\n\n       currentComponent.setState({validPokemonToGuess: true});\n     });\n  }\n\n  guess(): void {\n    let guess = (document.getElementById(\"guess-box\") as HTMLInputElement).value;\n    guessCount++;\n\n    // check if the player guessed correctly.\n    if (guess.toLowerCase() === pokemonToGuess) {\n      this.setState({guessedCorrectly: true, validPokemonToGuess: false});\n      correctGuesses++;\n    } else {\n      this.setState({guessedCorrectly: false});\n      correctAlert = <h3>Incorrect. Try again.</h3>\n      this.forceUpdate();\n    }\n  }\n\n  resetGame(): void {\n    pokemonToGuess = \"\";\n    index = -1;\n    spriteUrl = \"\";\n\n    correctGuesses = 0;\n    guessCount = 0;\n\n    this.setState({guessedCorrectly: false, validPokemonToGuess: false});\n\n  }\n\n  componentDidMount() {\n    let guessButton: HTMLElement = document.getElementById(\"guess-button\");\n    guessButton.addEventListener(\"click\", (e:Event) => this.guess());\n\n    let guessBox: HTMLElement = document.getElementById(\"guess-box\");\n    guessBox.addEventListener(\"keydown\", this.onEnterKeyDown);\n\n    let resetButton: HTMLElement = document.getElementById(\"reset-button\");\n    resetButton.addEventListener(\"click\", (e:Event) => this.resetGame());\n  }\n\n  componentDidUpdate() {\n    // clear the text box\n    ((document.getElementById(\"guess-box\")) as HTMLInputElement).value = \"\";\n\n    // puts the cursor in the guessbox\n    let guessBox: HTMLElement = document.getElementById(\"guess-box\");\n    guessBox.focus();\n  }\n\n  render() {\n    if (!this.state.validPokemonToGuess) { // We need to get a new pokemon\n      index = this.getRandomPokemonIndex();\n\n      this.getPokemonSprite(index);\n    }\n\n    if (this.state.guessedCorrectly) {\n      correctAlert = <h3>Correct!</h3>\n    }\n\n    // percentage guessed correctly\n    let guessAccuracy: number = ((correctGuesses / guessCount) * 100) || 0;\n\n    return(\n      <div className=\"WhosThatPokemon\">\n        <h2>Who's That Pokemon?</h2>\n        <div className=\"guess-top-container\">\n          <div className=\"guess-left\">\n            <img src={spriteUrl} alt={pokemonToGuess} className=\"sprite-img\"></img>\n          </div>\n          <div className=\"guess-right\">\n            <h3>Enter your guess below.</h3>\n            <div className=\"guess-area\">\n              <input type=\"text\" id=\"guess-box\"></input>\n              <input type=\"button\" id=\"guess-button\" value=\"Guess!\"></input>\n              <input type=\"button\" id=\"reset-button\" value=\"Reset Game\"></input>\n            </div>\n            <div className=\"correct-alert\">{correctAlert}</div>\n            <div className=\"guess-counts\">\n              <p>Correct Guesses: {correctGuesses}</p>\n              <p>Total Guesses: {guessCount}</p>\n              <p>Guess Accuracy: {guessAccuracy.toFixed(2)}%</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default WhosThatPokemon;\n","import React, { Component } from \"react\";\n\ntype Props = {\n  pokemonName: any,\n  pokemonId: any\n}\n\nclass NameId extends Component<Props, any> {\n\n  render() {\n    let name = (this.props.pokemonName).toString();\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n\n    return(\n      <div className=\"name-id\">\n        <img src=\"./img/pokeball.png\" alt=\"Icon of a Pokeball\" className=\"pokeball-icon\"/>\n        <p className=\"id\">#{this.props.pokemonId}</p>\n        <p className=\"name\">{name}</p>\n      </div>\n    )\n  }\n}\n\nexport default NameId;\n","import React, { Component } from \"react\";\n\ntype Props = {\n  abilities: any,\n}\n\n// ***\n// Commented code is from trying to get a second HTTP request to the \"Abilities\" endpoint working.\n// While we were able to make the request fine, we couldn't get this rendering correctly due to errors in our React logic\n// ***\n\n/*\ntype State = {\n  abilitiesRetrieved: any,\n}\n\nlet abilitiesList;\nlet tempList;\nlet abilitiesRetrieved;\n*/\n\nclass Abilities extends Component<Props, any> {\n\n  /*\n  constructor(props) {\n    super(props);\n    console.log(`Constructing`);\n\n    tempList = []\n    abilitiesRetrieved = false;\n\n    this.state = {\n      abilitiesList: null\n    }\n  }\n  */\n\n  /*\n  handleResponse = (error: any, response: any, body: any) => {\n    // grab the description and name\n    console.log(`handling response`);\n    let jsonBody = JSON.parse(body);\n    let description = jsonBody.effect_entries[0].short_effect;\n    let name = jsonBody.name;\n\n    tempList.push([name, description]);\n    console.log(`Pushed ${name}:${description} to...`);\n    console.log(tempList);\n  }\n  */\n\n\n  componentDidMount() {\n    /*\n    for (const ability of this.props.abilities) {\n      if (typeof ability === \"undefined\") { // there may be gaps in the props.abilities array. just ignore these\n        continue;\n      }\n\n      // Request information on the ability\n      var request = require(\"request\");\n      var options = {\n        method: 'GET',\n        url: ability.url,\n        headers: {\n          'cache-control': 'no-cache',\n           Connection: 'keep-alive',\n           Host: 'pokeapi.co',\n           Accept: '*//*'\n         }\n       };\n\n       // Send the request, handle the response for the callback\n      request(options, this.handleResponse);\n    }\n    */\n  }\n\n  render() {\n    /*\n    let abilityComponent: any;\n    if (abilitiesRetrieved) {\n      abilityComponent = abilitiesList.map( ability => (\n        <p key={ability[0]}>\n        {ability[0]}: {ability[1]}\n        </p>\n      ));\n    } else {\n      abilityComponent = null;\n    }\n    */\n\n    const abilityComponent = this.props.abilities.map( ability => (\n      <p key={ability}>\n        {(ability.charAt(0).toUpperCase() + ability.substring(1)).replace(/-/g, ' ')}\n      </p>\n    ));\n\n    return(\n      <div className=\"abilities\">\n        <p>ABILITIES</p>\n        <div className=\"abilities-box\">\n            {abilityComponent}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Abilities;\n","import React, { Component } from \"react\";\n\ntype Props = {\n  statsArray: any,\n}\n\nclass Stats extends Component<Props, any> {\n\n  render() {\n\n    const statsItems = this.props.statsArray.map( stat => (\n      // Capitalize the name of the stat, and replace '-' with ' '\n      // special-defense -> Special defense\n      <div key={stat}>\n        <p className=\"stat-name\">\n        {(stat[0].charAt(0).toUpperCase() + stat[0].substring(1)).replace(/-/g, ' ')}\n        </p>\n        <p key={stat} className=\"stat-value\">\n        {stat[1].toString()}\n        </p>\n      </div>\n    ));\n\n    return(\n      <div className=\"stats\">\n        <p>STATS</p>\n        <div className=\"stats-box\">\n          {statsItems}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Stats;\n","import React, { Component } from \"react\";\n\ntype Props = {\n  typesArray: any,\n}\n\nclass Types extends Component<Props, any> {\n\n\n  render() {\n\n    const typeItems = this.props.typesArray.map( type => (\n      <p key={type} className={type}>\n      {type.toUpperCase()}\n      </p>\n    ));\n\n    return(\n      <div className=\"types\">\n        {typeItems}\n      </div>\n    )\n  }\n}\n\nexport default Types;\n","import React, { Component } from \"react\";\nimport NameId from \"./NameId\"\nimport Abilities from \"./Abilities\"\nimport Stats from \"./Stats\"\nimport Types from \"./Types\"\n\n// define the types for the props\ntype Props = {\n  query: string,\n}\n\n// define the types for the states\ntype State = {\n  dataRetrieved: boolean,\n };\n\n// Array for sorting pokemon types by \"slot\" (ie. fire before flying for Charizard)\nlet name = \"\";\nlet pokemonId = -1;\nlet spriteUrl = \"\";\nlet sortedTypesArray = [];\nlet sortedAbilitiesArray = [];\nlet statsArray = [];\n\nclass Pokemon extends Component<Props, State> {\n\n  constructor(props) {\n    super(props);\n\n    name = \"\";\n    spriteUrl = \"\";\n    pokemonId = -1;\n\n    this.state = {\n      dataRetrieved: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // if the state has updated, but the props are the same,\n    // we don't need to do anything/display different data\n    if (this.props.query === prevProps.query) {\n      return;\n    } else if (this.props.query === \"\") {\n      return;\n    } else {\n      name = \"\";\n      pokemonId = -1;\n      spriteUrl = \"\";\n      sortedTypesArray = [];\n      sortedAbilitiesArray = [];\n      statsArray = [];\n      // clear the pokemon's info so it's reset for new\n    }\n\n    let query = this.props.query.toLowerCase();\n\n    // setup the HTTP request\n    var request = require(\"request\");\n    var options = {\n      method: 'GET',\n      url: 'https://pokeapi.co/api/v2/pokemon/' + query,\n      headers: {\n        'cache-control': 'no-cache',\n         Connection: 'keep-alive',\n         Host: 'pokeapi.co',\n         Accept: '*/*'\n       }\n     };\n\n     // Send the request, handle the response for the callback\n     request(options, this.handleResponse);\n  }\n\n  handleResponse = (error: any, response: any, body: any) => {\n    // Detect any errors and alert user accordingly\n    if (response.statusCode === 404) {\n      this.setState({ dataRetrieved: false });\n      alert(\"Pokemon or Index # not found.\");\n      return;\n    } else if (response.statusCode !== 200) {\n      this.setState({ dataRetrieved: false });\n      alert(\"An error has occurred. Have you tried turning it off and turning it back on again? :)\");\n      return;\n    }\n\n    // if it's not a 404, then the Pokemon is valid. Set the name\n    name = this.props.query;\n\n    // The API response body is returned as a raw string.\n    // Use JSON.parse() to change the response body (the data we want) into a JSON object that we can access\n    let jsonBody = JSON.parse(body);\n    console.log(\"Pokemon Response\");\n    console.log(jsonBody);\n\n    pokemonId = jsonBody.id;\n\n    // Grab the image URL for the pokemon's sprite and parse it\n    let sprites = jsonBody.sprites;\n    this.handleSprite(sprites);\n\n    // Create a sub-object of the pokemon's types and parse\n    let types = jsonBody.types;\n    this.handleTypes(types);\n\n    // parse sub-object of the pokemon's abilities\n    let abilities = jsonBody.abilities;\n    this.handleAbilities(abilities);\n\n    // parse sub-object of stats\n    let stats = jsonBody.stats;\n    this.handleStats(stats);\n\n    this.setState({ dataRetrieved: true });\n  }\n\n  handleSprite(sprites: any) {\n    if (sprites.front_default) {\n      spriteUrl = sprites.front_default;\n    }\n  }\n\n  handleTypes(types: any) {\n    if (types) {\n      for (const type of types) {\n        sortedTypesArray[type.slot] = type.type.name;\n      }\n    }\n  }\n\n  handleAbilities(abilities: any) {\n    if (abilities) {\n      for (const ability of abilities) {\n        let abilityName = ability.ability.name;\n\n        // remove \"-\" and replace with spaces. capitalize each word properly\n        abilityName = abilityName.replace(\"-\", \" \");\n        abilityName = abilityName.replace(/\\b[a-z]/g, function(character) {\n          return character.toUpperCase();\n        });\n\n        sortedAbilitiesArray.push(abilityName);\n      }\n    }\n  }\n\n  handleStats(stats: any) {\n    if (stats) {\n      for (const stat of stats) {\n        let statName, statValue;\n        statName = stat.stat.name;\n\n        // remove \"-\" and replace with spaces. capitalize each word properly\n        statName = statName.replace(\"-\", \" \");\n\n        if (statName !== \"hp\") { // for all stats (except hp), we want to capitalize words like normal\n\n            statName = statName.replace(/\\b[a-z]/g, function(character) {\n            return character.toUpperCase();\n          });\n        } else { // for \"hp\", we want it all uppercase like this: \"HP\"\n          statName = statName.toUpperCase();\n        }\n\n        statValue = stat.base_stat;\n\n        statsArray.push([statName, statValue]);\n      }\n    }\n  }\n\n  render() {\n    // detect whether data was retrieved successfully. Render components appropriately\n    let spriteComponent = spriteUrl ? <img src={spriteUrl} className=\"sprite\" alt={\"Pixel art sprite of \" + this.props.query} /> : null;\n    let nameIdComponent = this.state.dataRetrieved ? <NameId pokemonName={name} pokemonId= {pokemonId}/> : null;\n    let typeComponent = this.state.dataRetrieved ? <Types typesArray={sortedTypesArray} /> : null;\n    let abilitiesComponent = this.state.dataRetrieved ? <Abilities abilities={sortedAbilitiesArray} /> : null;\n    let statsComponent = this.state.dataRetrieved ? <Stats statsArray={statsArray} /> : null;\n\n    return(\n      <div className=\"Pokemon\">\n        <div className=\"pokemon-top\">\n          <div className=\"pokemon-left\">\n            {spriteComponent}\n            {typeComponent}\n          </div>\n          <div className=\"pokemon-right\">\n            {nameIdComponent}\n            {abilitiesComponent}\n          </div>\n        </div>\n        {statsComponent}\n      </div>\n    )\n  }\n}\n\nexport default Pokemon;\n","import React, { Component } from \"react\";\nimport Pokemon from \"./pokemon/Pokemon\";\nimport \"../css/search.scss\";\n\ntype State = {\n  query: string,\n };\n\nclass Search extends Component<{}, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: \"default\",\n    }\n  }\n\n  onEnterKeyDown = (e: KeyboardEvent) => {\n    if (e.keyCode === 13 || e.key === \"Enter\") {\n      this.search();\n    }\n  }\n\n  componentDidMount() {\n    let button: HTMLElement = document.getElementById(\"search-button\");\n    button.addEventListener(\"click\", (e:Event) => this.search());\n\n    let searchBox: HTMLElement = document.getElementById(\"search-box\");\n    searchBox.addEventListener(\"keydown\", this.onEnterKeyDown);\n\n    if (window.name !== \"\") {\n      this.setState({ query: window.name });\n      window.name = \"\";\n    }\n  }\n\n  componentDidUpdate() {\n    // places the cursor into the search box\n    let searchBox: HTMLElement = document.getElementById(\"search-box\");\n    searchBox.focus();\n\n  }\n\n  private search() {\n    let inputValue = (document.getElementById(\"search-box\") as HTMLInputElement).value;\n    this.setState({ query: inputValue });\n  }\n\n  render() {\n    return (\n      <div className=\"search\">\n        <div className=\"search-area\">\n          <input type=\"text\" id=\"search-box\" placeholder=\"Search for a Pokemon\"></input>\n          <input type=\"button\" id=\"search-button\" value=\"Search\"></input>\n        </div>\n        <div className=\"search-results\">\n          <Pokemon query={this.state.query}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\n\nclass About extends Component {\n  render() {\n    return (\n      <div>\n        <h2>About</h2>\n        <p>Pokeweb is a web-based Pokedex built with React, TypeScript, and NodeJS.</p>\n\n        <p>Created by Leo Barry and Jude Battista.</p>\n\n        <p>Source code can be found <a href=\"https://github.com/lbarry00/Pokeweb\">HERE</a>.</p>\n\n        <h3>Current Features</h3>\n        <p>\n            <em>Search</em> - Query Pokemon by name or ID number. The name is case-insensitive. The ID number is a value internal to PokeApi, so is largely useless to external customers. The results include the Pokemon's type, ability list, and statistics.\n            <br /> <br />\n            <em>Search By Type</em> - Query a Pokemon by name or ID number. The name is case-insensitive. The ID number is a value internal to PokeApi, so is largely useless to external customers. The results include a list of all the Pokemon in the Pokedex belonging to that type. Each result contains a link to the raw data associated with that Pokemon.\n            <br /> <br />\n            <em>Who's That Pokemon</em> - Provides a graphic of a randomly selected Pokemon and asks the user to guess its name. When the user correctly guesses the Pokemon's name, they are presented with another randomly selected image. It tracks the total number of guesses, the number of correct guesses, and the percentage of correct guesses.\n        </p>\n       </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from \"react\";\n\n// define the types for the props\ntype Props = {\n  query: string,\n}\n\n// define the types for the states\ntype State = {\n  typeName: string,\n  pokemonRetrieved: boolean\n};\n\n// Array for sorting pokemon types by \"slot\" (ie. fire before flying for Charizard)\nlet name = \"\";\nlet pokemonList = [];\nlet strengths = []; // \"super effective\"\nlet weaknesses = []; // weak to (\"super effective\" against this type)\nlet immunities = []; // immune to\n\nclass ByType extends Component<Props, State> {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      typeName: \"\",\n      pokemonRetrieved: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // if the state has updated, but the props are the same,\n    // we don't need to do anything/display different data\n    if (this.props.query === prevProps.query) {\n      return;\n    } else if (this.props.query === \"\") {\n      return;\n    } else {\n      name = \"\";\n      pokemonList = [];\n      strengths = [];\n      weaknesses = [];\n      immunities = [];\n      // clear the results array so it's reset for new\n    }\n\n    // normalize casing\n    let query = this.props.query.toLowerCase();\n\n    // setup the HTTP request\n    var request = require(\"request\");\n    var options = {\n      method: 'GET',\n      url: 'https://pokeapi.co/api/v2/type/' + query,\n      headers: {\n        'cache-control': 'no-cache',\n         Connection: 'keep-alive',\n         Host: 'pokeapi.co',\n         'Cache-Control': 'no-cache',\n         Accept: '*/*'\n       }\n     };\n\n     // Send the request, handle the response for the callback\n     request(options, this.handleResponse);\n  }\n\n  handleResponse = (error: any, response: any, body: any) => {\n    // Detect any errors and alert user accordingly\n    if (response.statusCode === 404) {\n      alert(\"Pokemon type not found.\");\n      this.setState({ pokemonRetrieved: false });\n      return;\n    } else if (response.statusCode !== 200) {\n      this.setState({ pokemonRetrieved: false });\n      alert(\"An error has occurred. Have you tried turning it off and turning it back on again? :)\");\n      return;\n    }\n\n    // The API response body is returned as a raw string.\n    // Use JSON.parse() to change the response body (the data we want) into a JSON object that we can access\n    let jsonBody = JSON.parse(body);\n    console.log(jsonBody);\n\n    name = jsonBody.name;\n    name = name.charAt(0).toUpperCase() + name.substring(1);\n\n    let pokemon = jsonBody.pokemon; // JSON array of the pokemon's types\n    this.handlePokemon(pokemon);\n    this.handleDamageRelations(jsonBody.damage_relations);\n    if (pokemon) {\n      this.setState({ pokemonRetrieved: true });\n    } else {\n      this.setState({ pokemonRetrieved: false });\n    }\n  }\n\n  handlePokemon(pokemon: any) {\n    if (pokemon) {\n      let i = 0;\n      for (i = 0; i < pokemon.length; i++ ) {\n        let name = pokemon[i].pokemon.name;\n        name = name.charAt(0).toUpperCase() + name.substring(1); // capitalize the first letter\n\n        pokemonList.push({name: name, key: name});\n      }\n    }\n  }\n\n  handleDamageRelations(damageRelations) {\n    console.log(damageRelations);\n    let doubleDamageFrom = damageRelations.double_damage_from;\n    let doubleDamageTo = damageRelations.double_damage_to;\n    let immuneTo = damageRelations.no_damage_from;\n\n    // Get strengths\n    for (let i = 0; i < doubleDamageTo.length; i++) {\n      let typeName = doubleDamageTo[i].name;\n      typeName = typeName.charAt(0).toUpperCase() + typeName.substring(1);\n      strengths.push(typeName);\n    }\n\n    // Get weaknesses\n    for (let i = 0; i < doubleDamageFrom.length; i++) {\n      let typeName = doubleDamageFrom[i].name;\n      typeName = typeName.charAt(0).toUpperCase() + typeName.substring(1);\n      weaknesses.push(typeName);\n    }\n\n    // Get immunities\n    for (let i = 0; i < immuneTo.length; i++) {\n      let typeName = immuneTo[i].name;\n      typeName = typeName.charAt(0).toUpperCase() + typeName.substring(1);\n      immunities.push(typeName);\n    }\n  }\n\n  onClickLink(pokemonName) {\n    window.name = pokemonName;\n  }\n\n  render() {\n    // Alphabetize the list of pokemon\n    pokemonList.sort(function(a, b) {\n      let nameA = a.name;\n      let nameB = b.name;\n\n      if (nameA < nameB) return -1;\n      if (nameA > nameB) return 1;\n      return 0;\n    });\n\n    // Map components for strengths, weaknesses, and immunities\n    const strengthsComponent = strengths.map(type => (\n      <p key={type} className={type.toLowerCase()}>{type}</p>\n    ));\n    const weaknessesComponent = weaknesses.map(type => (\n      <p key={type} className={type.toLowerCase()}>{type}</p>\n    ));\n    const immunitiesComponent = immunities.map(type => (\n      <p key={type} className={type.toLowerCase()}>{type}</p>\n    ));\n\n    // Map pokemon list to components\n    const pokemonListComponent = pokemonList.map(poke => (\n      <a href=\"./\" key={poke.name} className=\"pokemon-bytype\" onClick={() => this.onClickLink(poke.name)}>{poke.name}</a>\n    ));\n\n    if (!this.state.pokemonRetrieved) {\n      return(<div className=\"type\"></div>)\n    } else if (immunities.length > 0) {\n      return(\n        <div className=\"bytype\">\n          <h2 className={name.toLowerCase()}>{name}</h2>\n          <div className=\"type-info\">\n            <div className=\"strengths\">\n              <h3>Strengths</h3>\n              {strengthsComponent}\n            </div>\n            <div className=\"weaknesses\">\n              <h3>Weaknesses</h3>\n              {weaknessesComponent}\n            </div>\n            <div className=\"immunities\">\n              <h3>Immune To</h3>\n              {immunitiesComponent}\n            </div>\n          </div>\n          <div className=\"pokemon\">\n            <h3>Pokemon</h3>\n            <div className=\"pokemon-list\">\n              {pokemonListComponent}\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return(\n        <div className=\"bytype\">\n          <h2 className={name.toLowerCase()}>{name}</h2>\n          <div className=\"type-info\">\n            <div className=\"strengths\">\n              <h3>Strengths</h3>\n              {strengthsComponent}\n            </div>\n            <div className=\"weaknesses\">\n              <h3>Weaknesses</h3>\n              {weaknessesComponent}\n            </div>\n          </div>\n          <div className=\"pokemon\">\n            <h3>Pokemon</h3>\n            <div className=\"pokemon-list\">\n              {pokemonListComponent}\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default ByType;\n","import React, { Component } from \"react\";\nimport ByType from \"./pokemon/ByType\";\nimport \"../css/search-bytype.scss\";\n\ntype State = {\n  query: string,\n };\n\nclass SearchByType extends Component<{}, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: \"default\",\n    }\n  }\n\n  onEnterKeyDown = (e: KeyboardEvent) => {\n    if (e.keyCode === 13 || e.key === \"Enter\") {\n      this.search();\n    }\n  }\n\n  componentDidMount() {\n    let button: HTMLElement = document.getElementById(\"search-button\");\n    button.addEventListener(\"click\", (e:Event) => this.search());\n\n    let searchBox: HTMLElement = document.getElementById(\"search-box-bytype\");\n    searchBox.addEventListener(\"keydown\", this.onEnterKeyDown);\n  }\n\n  private search() {\n    let inputValue = (document.getElementById(\"search-box-bytype\") as HTMLInputElement).value;\n    this.setState({ query: inputValue });\n  }\n\n  render() {\n    return (\n      <div className=\"search\">\n        <div className=\"search-area\">\n          <input type=\"text\" id=\"search-box-bytype\" placeholder=\"Search By Type\"></input>\n          <input type=\"button\" id=\"search-button\" value=\"Search\"></input>\n        </div>\n        <div className=\"search-results\">\n          <ByType query={this.state.query}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchByType;\n","import React, { Component } from \"react\";\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\nimport Search from \"./Search\";\nimport About from \"./About\";\nimport SearchByType from \"./SearchByType\";\nimport WhosThatPokemon from \"./WhosThatPokemon\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <div className=\"header\">\n          <ul className=\"header-nav\">\n            <li><NavLink exact to=\"/\">Search</NavLink></li>\n            <li><NavLink to=\"/searchbytype\">Search By Type</NavLink></li>\n            <li><NavLink to=\"/wtp\">Who's That Pokemon</NavLink></li>\n            <li><NavLink to=\"/about\">About</NavLink></li>\n          </ul>\n          <h1>POKÉWEB</h1>\n          </div>\n          <div className=\"content\">\n            <Route exact path=\"/\" component={Search}/>\n            <Route path=\"/searchbytype\" component={SearchByType}/>\n            <Route path=\"/wtp\" component={WhosThatPokemon}/>\n            <Route path=\"/about\" component={About}/>\n          </div>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport Main from './js/Main';\n\nReactDOM.render(\n  <Main/>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}